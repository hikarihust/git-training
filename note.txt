-So sánh giữa 2 nhanh: git difftool branch1 branch2
-Cách xem thông số cấu hình Git: git config -l
-Hủy thực hiện merge khi có conflict xảy ra: git merge --abort
-Khi pull Remote Repo mới nhất về mà có conflict xảy ra: git merge --abort
-Ctrl + C: Exit để thực hiện tiếp lệnh git
-git rebase --abort: Ngừng quá trình Rebase khi có conflict xảy ra
-git reflog: Ngoài việc xem được lịch sử commit giống như lệnh git log thì còn xem được các hành động của ta trên Local Repo
	Master Branch:git log
		commit 31c82455c4ef339b15ffcb16191d5a978f23b4b0 (HEAD -> master)
		Author: vudinhquang <vudinhquangk53@gmail.com>
		Date:   Sat Feb 9 16:09:02 2019 +0900
		    master - add abc
		commit 8cf64462ec597b5610a506f3c9e4302e5829fa68
		Author: vudinhquang <vudinhquangk53@gmail.com>
		Date:   Sat Feb 9 16:06:04 2019 +0900
		    init project

	Video Branch:git log
		commit 32b807a8397c6e4cef4f507bbee0ceb94b1b241e (HEAD -> video)
		Author: vudinhquang <vudinhquangk53@gmail.com>
		Date:   Sat Feb 9 16:07:48 2019 +0900
		    video - add 123
		commit 8cf64462ec597b5610a506f3c9e4302e5829fa68
		Author: vudinhquang <vudinhquangk53@gmail.com>
		Date:   Sat Feb 9 16:06:04 2019 +0900
		    init project

	git reflog:
	31c8245 (HEAD -> master) HEAD@{0}: commit: master - add abc
	8cf6446 HEAD@{1}: checkout: moving from video to master
	32b807a (video) HEAD@{2}: commit: video - add 123
	8cf6446 HEAD@{3}: checkout: moving from master to video
	8cf6446 HEAD@{4}: commit (initial): init project
-git log: Xem lại lịch sử commit trên 1 nhánh nào đó
	Video Branch:git log
		commit e5e6b371465a1864a9ddefda1c37e46993e2aa8e (HEAD -> video)
		Author: vudinhquang <vudinhquangk53@gmail.com>
		Date:   Sat Feb 9 16:33:50 2019 +0900
		    video - add 456
		commit 53e58870a18d8eff518df24d28e67c759091e697
		Author: vudinhquang <vudinhquangk53@gmail.com>
		Date:   Sat Feb 9 16:33:05 2019 +0900
		    video - add 123
		commit 6a6d5e176da085d25efa5340ad6da990aa250fb0 (master)
		Author: vudinhquang <vudinhquangk53@gmail.com>
		Date:   Sat Feb 9 16:32:01 2019 +0900
		    init project

-git reset --hard: Quay về 1 vị trí commit nào đó của Video Branch
	Video Branch:
	step1: git reset --hard 53e588
	step2: git log
		commit 53e58870a18d8eff518df24d28e67c759091e697 (HEAD -> video)
		Author: vudinhquang <vudinhquangk53@gmail.com>
		Date:   Sat Feb 9 16:33:05 2019 +0900
		    video - add 123
		commit 6a6d5e176da085d25efa5340ad6da990aa250fb0 (master)
		Author: vudinhquang <vudinhquangk53@gmail.com>
		Date:   Sat Feb 9 16:32:01 2019 +0900
		    init project
	-->Thường dùng câu lệnh git log để kiểm tra các commit đang có rồi sau đó dùng git reset --hard để reset về 1 commit mong muốn.

-STASH: Vùng lưu trữ tạm, trong quá trình làm việc mà chưa muốn commit thì lưu tạm vào vùng lưu trữ tạm STASH, sau đó có thể khôi
	phục lại trạng thái mà ta đã làm việc mà được lưu vào STASH

-------------------------------------------------------------------------------------------------------------------
1.Conflict
 -Conflict xảy ra khi có cùng 1 sựu thay đổi trên cùng 1 dòng của 1 tập tin và GIT không biết lựa chọn câu lệnh nào.
 -Conflict có thể xảy ra trong trường hợp làm việc nhóm: 2 người cùng chỉnh sửa trên cùng 1 file, 1 dòng code(Remote)
 -Khi 1 người làm việc nhưng ở mỗi nhánh lại có sự thao tác trên cùng 1 tập tin(Branch)


 2.Xử lý conflict
 -Branch:
 (Tình huống 1)
 	Master branch:readme.txt
 		init readme.txt(line 1)
 		abcxyz (line 2)
 	Video branch:readme.txt
 		init readme.txt(line 1)
 		video(line 2)
 	-->Khi merge 2 nhánh lại thì sẽ có conflict xảy ra tại line 2:
 		-coppy nhánh master ra chỗ khác
 		-git merge video(tại bước này có conflict xảy ra)
 		-git mergetool
 		-Xử lý conflict:paster lần lượt file tương ứng trên nhánh master vào winmerge thực hiện so sánh với nhánh video để merge
 		-tạo commit mới kết thúc quá trình merge
 
 (Tình huống 2)
 	Master branch:readme.txt
		init readme.txt
		abcxyz
		video
 	Video branch:readme.txt
		init readme.txt
		abcxyz

		Line 4
	-->Trong trường hợp này cũng vẫn sẽ có đụng độ xảy ra, các vấn đề conflict xảy ra:
		Tại line 3: lấy giá trị video hay lấy giá trị rỗng?
			init readme.txt
			abcxyz
			<<<<<<< HEAD
			video
			=======

			Line 4
			>>>>>>> video

-Remote:
	Local Repo:
		a1
		a2
	Remote Repo:
		a1
		b12
	-->Có conflict xảy ra khi push lên Repo(Note: trước khi push thì cần phải pull về trước)
		-git pull origin master: có Conflict xảy ra.
			a1
			<<<<<<< HEAD
			a2
			=======
			b12
			>>>>>>> 3ecf23e1b02bbe090ce644bb1c38dafc34221f03
	-Cách xử lý conflict trong trường hợp này:
		-coppy Local Repo ra chỗ khác
		-git pull origin master, tại đây sẽ có conflict xảy ra
		-git mergetool(merge bằng winmerge)
		-tạo ra commit mới(kết thúc quá trình xử lý conflict)
		-git pull origin master: thực hiện pull lại 1 lần nữa(Không bị conflict)
		-git push origin master

------------------------------------------------------------------------------------------------------------------

										Hiểu rõ hơn về  CLONE, PULL và FETCH

1.CLONE: Sao chép toàn bộ Remote Repo
2.PULL: Sau khi thực hiện CLONE, trong quá trình làm việc mà có thay đổi gì trên remote thì chỉ cần dùng pull để cập
	nhật lại
3.FETCH: Lấy toàn bộ dữ liệu của Remote Repo nhưng cho phép gộp thủ công chứ không tự động gộp giống như pull
	Thực hiện xong git fetch thì có thể thực hiện cập nhật thủ công phần đã thay đổi(pull thì cập nhật tự động sẽ diễn ra) 
	 bằng cách thực hiện merge:
	 	-git fetch/git fetch origin
	 	-checkout video
	 	-git merge origin/master: merge nhánh video với origin/master, trong đó master trên remote đã được thay đổi,
	 		do đó thì phần thay đối đó sẽ được merge vào nhánh video

	Thông thường thì kết quả của câu lệnh git fetch/git fetch origin có dạng như sau:
		remote: Enumerating objects: 10, done.
		remote: Counting objects: 100% (10/10), done.
		remote: Compressing objects: 100% (6/6), done.
		remote: Total 6 (delta 2), reused 0 (delta 0), pack-reused 0
		Unpacking objects: 100% (6/6), done.
		From https://github.com/vudinhquang/test123
		   0cab120..8734251  master     -> origin/master
		   b69f3e3..7b023e6  video      -> origin/video
		Trong đó thì trên remote có 2 sựu thay đổi:
			master branch: thay đổi từ commit 0cab120 -> 8734251
			video brnach: thay đổi từ commit b69f3e3 -> 7b023e6

	--> Fetch không cập nhật lại WORKSPACE như pull mà chỉ cập nhật lại LOCAL REPO

------------------------------------------------------------------------------------------------------------------

					  Thực hành sử dụng .gitignore

Sử dụng .gitignore để không theo dõi các tập tin được chỉ định(Từ chối một số tập tin được thêm vào vùng Staged) -> dụng để
		khai báo các tập tin mà mình không muốn commit, không muốn đưa vào Staged.

- Add me.txt, libs/string.txt, libs/image.txt nhưng không muốn commit
- Add file .gitignore bằng câu lệnh touch .gitignore
- Cập nhật nội dung cho file .gitignore
		me.txt
		/libs 
--> Khi sử dụng git status thì không thấy me.txt và các file string.txt, image.txt nằm trong thư mục libs bị theo dõi


Tìm hiểu chi tiết hơn về gitignore:
		- Không commit các file *.xml : Khi có nhiều file xml thì có thể đại diện tên của các file này bằng dấu '*',
				(bất kể file .xml nằm ở vị trí nào, thư mục nào cũng đều không được theo dẽo)
		- Dấu '#' là ghi chú
		- abc/ là thư mục abc, bỏ qua tất cả tập tin trong thư mục abc/
			abc  - def		- def.txt
				 - abc.txt				
			abc2 -	abc - test.txt
			--> Không theo dõi tất cả các thư mục abc trên.
		- *.txt không theo dõi tất cả các tập tin có đuôi là .txt(ở tất cả các vị trị)
		# nhưng theo dõi tập tin testhtml.txt mặc dù đang bỏ qua tất cả các tập tin .txt ở trên !testhtml.txt
		# chỉ bỏ qua tập tin libs ở thư mục gốc, chứ không phải ở thư mục con subdir/libs -> /libs
			lib  - def		- def.txt
				 - abc.txt				
			abc2 -	libs - test.txt
			-->abc2 -	libs - test.txt vẫn được theo dõi
		# docs/*.txt: Bỏ docs/notes.txt, không phải docs/server/abc.txt
			docs - server - abc.txt
				 - notes.txt
		# doc/**/*.txt: bỏ qua tất cả tập .txt trong thư mục doc
			doc - server - def.txt 
				- abc.txt
			--> cả def.txt và abc.txt đều được bỏ qua
		/public/html/*/*: 
			public - html - css - detail.css
								- top 		- top.css
						  - js  - detail.js
						  		- top 		- top.js
			--> Tất cả các tập tin trên đều được bỏ qua
		# !/public/html/css/*: Tuy nhiên tập tin detail.css và top.css vẫn sẽ được theo dõi

------------------------------------------------------------------------------------------------------------------

									Amend(Cách gộp commit)

- Nên xây dựng xong 1 task hay yêu cầu nào đó or hoàn thiện fix xong 1 bug nào đó rồi mới thực hiện commit. Mỗi 1 commit 
	nên đáp ứng 1 yêu cầu nào đó chứ không phải là mỗi 1 thao tác thì commit lên 1 lần

Vấn đề: Nhận được 1 task nào đó, trong đó cần phải thực hiện tạo ra 2 file đó là task-01.txt và task-02.txt rồi sau đó
	commit 2 file này lên. Nhưng trong quá trình thực hiện mình đã chỉ tạo ra 1 file task-01.txt và commit nó, sau đó
	mới nhớ ra là chưa tạo file task-02.txt. Nếu sau đó nếu mình tạo file task-02.txt và commit lên thì sẽ có đến 2
	commit mà trong đó yêu cầu chỉ có 1 commit.
	- Tạo file task-01.txt, git add ., git commit -m "Done task 01 02" -> đã tạo được file task-01.txt và commit lên Local Repo
	- Tạo file task-02.txt, git add .,  git commit --amend --> gộp thêm file task-02.txt và commit trên để tạo ra cùng 1 commit 
		với file task-01.txt
	- git commit --amend -m "Finish tast 01 02": Thay đổi phần comment của commit 'Done task 01 02' thành 'Finish tast 01 02'